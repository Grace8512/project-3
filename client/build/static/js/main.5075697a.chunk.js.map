{"version":3,"sources":["components/ProductInfo.js","components/Customer.js","components/OrderInfo.js","components/Developer.js","App.js","registerServiceWorker.js","index.js"],"names":["ProductInfo","props","react_default","a","createElement","class","style","src","image","alt","name","price","desc","onClick","Axios","post","_id","customerName","then","res","console","log","Customer","_React$useState","React","useState","_React$useState2","Object","slicedToArray","productList","setProductList","get","body","Fragment","map","item","components_ProductInfo","OrderInfo","date","productId","href","isChecked","Developer","orderList","setOrderList","components_OrderInfo","App","react_router_dom","react_router","exact","path","component","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5075697a.chunk.js","sourcesContent":["import React from \"react\";\nimport Axios from \"axios\";\n\nconst ProductInfo = (props) => {\n    \n    const makeOrder = () => {\n        Axios.post(\"/orders/\"+props._id, {customerName: \"jane\"}).then((res)=>{\n            //props._id <- product.js에서 오토로 만들어준 아이디\n            console.log('make order res' + res);\n        }); \n    };\n    return (\n        <div class=\"card\" style=\"width: 18rem;\">\n            <img class=\"card-img-top\" src={props.image} alt=\"Card image cap\" />\n            <div class=\"card-body\">\n                <h5 class=\"card-title\">{props.name}</h5>\n                <p class=\"card-text\">{props.price}</p>\n                <p class=\"card-text\">{props.desc}</p>\n                <button class=\"btn btn-primary\" onClick={makeOrder}>Order Now</button>\n            </div>\n        </div>\n    )\n}\n\nexport default ProductInfo;","import React from \"react\";\nimport Axios from \"axios\";\nimport ProductInfo from \"./ProductInfo\";\nconst Customer = (props) => {\n    const [productList, setProductList] = React.useState([]);\n\n    const getProducts = () => {\n        Axios.get(\"/products\").then((res)=>{\n            console.log('get products res' + res);\n            setProductList(res.body);\n        }); \n    };\n    getProducts();\n    return (\n        <>\n        {productList.map((item)=>\n            <ProductInfo\n                _id = {item._id} //productId\n                image = {item.image}\n                name = {item.name}\n                desc = {item.desc}\n                price = {item.price}\n            />\n        )}\n        </>\n    );\n}\n\nexport default Customer;\n\n","import React from \"react\";\n\nconst OrderInfo = (props) => {\n    \n    return (\n\n        <div class=\"card\" style=\"width: 18rem;\">\n            <div class=\"card-header\">\n                {props.date}\n            </div>\n            <ul class=\"list-group list-group-flush\">\n                <li class=\"list-group-item\">{props._id}</li>\n                <li class=\"list-group-item\">{props.productId}</li>\n                <li class=\"list-group-item\">{props.customerName}</li>\n                <li class=\"list-group-item\">{props.price}</li>\n            </ul>\n            <a href=\"#\" class=\"btn btn-primary\">{props.isChecked}</a>\n        </div>\n    )\n}\n\nexport default OrderInfo;","import React from \"react\";\nimport Axios from \"axios\";\nimport OrderInfo from \"./OrderInfo\";\n\nconst Developer = (props) => {\n    const [orderList, setOrderList] = React.useState([]);\n\n    const getOrders = () => {\n        Axios.get(\"/orders\").then((res)=>{\n            console.log('res.body' + res.body);\n            setOrderList(res.body);\n        }); \n    };\n    getOrders();\n    return (\n        <>\n        {orderList.map((item)=>\n            <OrderInfo\n                _id = {item._id}\n                productId = {item.productId}\n                customerName = {item.customerName}\n                price = {item.price}\n                isChecked = {item.isChecked}\n            />\n        )}\n        </>\n    );\n}\n\nexport default Developer;","import React, { Component } from \"react\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport \"./App.css\";\nimport Customer from \"./components/Customer\";\nimport Developer from \"./components/Developer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route exact path=\"/\" component={Customer}/>\n        <Route exact path=\"/dev\" component={Developer}/>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}